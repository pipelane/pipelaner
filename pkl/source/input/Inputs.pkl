@go.Package { name = "github.com/pipelane/pipelaner/gen/source/input" }
module com.pipelaner.source.inputs

import "package://pkg.pkl-lang.org/pkl-go/pkl.golang@0.11.0#/go.pkl"
import ".../source/Common.pkl"

abstract class Input {
  name: String(!isEmpty)
  fixed sourceName: String(!isEmpty)
  threads: UInt(this >= 1) = read?("env:GOMAXPROCS")?.toInt() ?? 1
  outputBufferSize: UInt(this >= 1) = 10 * threads
}

class Cmd extends Input {
  fixed sourceName = "cmd"
  exec: Listing<String>
}

typealias AutoOffsetReset = "earliest"|"latest"
typealias Strategy = "range"|"round-robin"|"cooperative-sticky"|"sticky"

class Kafka extends Input {
  fixed sourceName = "kafka"
  common: Common.Kafka
  autoCommitEnabled: Boolean = true
  consumerGroupID: String(!isEmpty)
  autoOffsetReset: AutoOffsetReset = "earliest"
  balancerStrategy: Listing<Strategy> = new Listing<Strategy> {
    "cooperative-sticky"
  }
  // fetchMaxBytes > maxPartitionFetchBytes
  maxPartitionFetchBytes: DataSize(isBetween(0.mib, fetchMaxBytes)) = 10.mib
  fetchMaxBytes: DataSize(this.value > 0.mib.value) = 50.mib
  //
}

typealias ConnectionType = "unix"|"http2"

class Pipelaner extends Input {
  fixed sourceName = "pipelaner"
  commonConfig: Common.Pipelaner?
  // if you use unix socket, please set up 'unixSocketPath'
  // if you use http2 socket, please set up 'commonConfig'
  connectionType: ConnectionType = "http2"
  unixSocketPath: String?
}
