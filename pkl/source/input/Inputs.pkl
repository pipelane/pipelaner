@go.Package {name = "github.com/pipelane/pipelaner/gen/source/input" }
module pipelaner.source.inputs

import "package://pkg.pkl-lang.org/pkl-go/pkl.golang@0.8.1#/go.pkl"
import ".../source/Common.pkl"

abstract class Input {
  name: String
  fixed sourceName: String
  threads: Int = 1
  outputBufferSize: Int = 10
}

class Cmd extends Input {
  fixed sourceName = "cmd"
  exec: Listing<String>
}

typealias AutoOffsetReset = "earliest" | "latest"
typealias Strategy = "range" | "round-robin" | "cooperative-sticky"

class KafkaConsumer extends Input {
  fixed sourceName = "kafka-consumer"
  kafka: Common.Kafka
  autoCommitEnabled: Boolean? = false
  consumerGroupID: String
  // TODO: replace default values && implement validation function
  // fetchMaxBytes > maxPartitionFetchBytes
  maxPartitionFetchBytes: DataSize = 50.mib
  fetchMaxBytes: DataSize = 10.mib
  autoOffsetReset: AutoOffsetReset = "earliest"
  balancerStrategy: Listing<Strategy>?
}

typealias ConnectionType = "unix"

class Pipelaner extends Input {
  fixed sourceName = "pipelaner"

  host: String?
  port: Int
  tls: Boolean(tlsEnabled)? = false

  hidden tlsEnabled = (_) ->
    if (keyFile == "" || certFile == "")
      throw("key and cert files required with enabled tls")
    else true
  certFile: String?
  keyFile: String?
  connectionType: ConnectionType?
  unixSocketPasth: String
}
